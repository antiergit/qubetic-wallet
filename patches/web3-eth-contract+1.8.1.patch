diff --git a/node_modules/web3-eth-contract/README.md b/node_modules/web3-eth-contract/README.md
index eae9b06..8ee1f53 100644
--- a/node_modules/web3-eth-contract/README.md
+++ b/node_modules/web3-eth-contract/README.md
@@ -10,20 +10,12 @@ Please read the [documentation][docs] for more.
 
 ## Installation
 
-You can install the package either using [NPM](https://www.npmjs.com/package/web3-eth-contract) or using [Yarn](https://yarnpkg.com/package/web3-eth-contract)
-
-### Using NPM
+### Node.js
 
 ```bash
 npm install web3-eth-contract
 ```
 
-### Using Yarn
-
-```bash
-yarn add web3-eth-contract
-```
-
 ## Usage
 
 ```js
@@ -50,3 +42,4 @@ All the TypeScript typings are placed in the `types` folder.
 [repo]: https://github.com/ethereum/web3.js
 [npm-image]: https://img.shields.io/npm/v/web3-eth-contract.svg
 [npm-url]: https://npmjs.org/package/web3-eth-contract
+
diff --git a/node_modules/web3-eth-contract/lib/index.js b/node_modules/web3-eth-contract/lib/index.js
index 8d3e518..992c4a7 100644
--- a/node_modules/web3-eth-contract/lib/index.js
+++ b/node_modules/web3-eth-contract/lib/index.js
@@ -350,39 +350,39 @@ Contract.prototype._encodeEventABI = function (event, options) {
     }).forEach(function (f) {
         result[f] = formatters.inputBlockNumberFormatter(options[f]);
     });
-    let topics = [];
-    if (options.topics && Array.isArray(options.topics)) {
-        topics = [...options.topics];
+    // use given topics
+    if (Array.isArray(options.topics)) {
+        result.topics = options.topics;
+        // create topics based on filter
     }
     else {
-        topics = [];
+        result.topics = [];
         // add event signature
         if (event && !event.anonymous && event.name !== 'ALLEVENTS') {
-            topics.push(event.signature || abi.encodeEventSignature(utils.jsonInterfaceMethodToString(event)));
+            result.topics.push(event.signature);
         }
         // add event topics (indexed arguments)
-        if (event.name !== 'ALLEVENTS' && event.inputs) {
-            for (const input of event.inputs) {
-                if (!input.indexed) {
-                    continue;
-                }
-                const value = filter[input.name];
+        if (event.name !== 'ALLEVENTS') {
+            var indexedTopics = event.inputs.filter(function (i) {
+                return i.indexed === true;
+            }).map(function (i) {
+                var value = filter[i.name];
                 if (!value) {
-                    // eslint-disable-next-line no-null/no-null
-                    topics.push(null);
-                    continue;
+                    return null;
                 }
+                // TODO: https://github.com/ethereum/web3.js/issues/344
+                // TODO: deal properly with components
                 if (Array.isArray(value)) {
-                    topics.push(value.map(v => abi.encodeParameter(input.type, v)));
-                }
-                else {
-                    topics.push(abi.encodeParameter(input.type, value));
+                    return value.map(function (v) {
+                        return abi.encodeParameter(i.type, v);
+                    });
                 }
-            }
+                return abi.encodeParameter(i.type, value);
+            });
+            result.topics = result.topics.concat(indexedTopics);
         }
-    }
-    if (topics.length) {
-        result.topics = topics;
+        if (!result.topics.length)
+            delete result.topics;
     }
     if (this.options.address) {
         result.address = this.options.address.toLowerCase();
@@ -561,7 +561,6 @@ Contract.prototype._generateEventOptions = function () {
     return {
         params: this._encodeEventABI(event, options),
         event: event,
-        filter: options.filter || {},
         callback: callback
     };
 };
@@ -648,18 +647,6 @@ Contract.prototype._on = function () {
     subscription.subscribe('logs', subOptions.params, subOptions.callback || function () { });
     return subscription;
 };
-const filterAllEventsResults = (subOptions, data) => {
-    if (subOptions.event && subOptions.event.name === 'ALLEVENTS' && Array.isArray(data)) {
-        const filter = subOptions.filter || {};
-        const filterKeys = Object.keys(filter);
-        return filterKeys.length > 0
-            ? data.filter(log => typeof log === 'string' ? true : filterKeys.every((k) => Array.isArray(filter[k]) ? (filter[k]).some((v) => String(log.returnValues[k]).toUpperCase() ===
-                String(v).toUpperCase()) : (String(log.returnValues[k]).toUpperCase() ===
-                String(filter[k]).toUpperCase())))
-            : data;
-    }
-    return data;
-};
 /**
  * Get past events from contracts
  *
@@ -681,11 +668,7 @@ Contract.prototype.getPastEvents = function () {
     getPastLogs.setRequestManager(this._requestManager);
     var call = getPastLogs.buildCall();
     getPastLogs = null;
-    return call(subOptions.params, (err, data) => {
-        if (typeof subOptions.callback === 'function') {
-            subOptions.callback(err, filterAllEventsResults(subOptions, data));
-        }
-    }).then(filterAllEventsResults.bind(this, subOptions));
+    return call(subOptions.params, subOptions.callback);
 };
 /**
  * returns the an object with call, send, estimate functions
diff --git a/node_modules/web3-eth-contract/src/index.js b/node_modules/web3-eth-contract/src/index.js
index 0fa4d89..6ee2b25 100644
--- a/node_modules/web3-eth-contract/src/index.js
+++ b/node_modules/web3-eth-contract/src/index.js
@@ -415,44 +415,46 @@ Contract.prototype._encodeEventABI = function (event, options) {
         result[f] = formatters.inputBlockNumberFormatter(options[f]);
     });
 
+    // use given topics
+    if(Array.isArray(options.topics)) {
+        result.topics = options.topics;
 
-    let topics = []
-    if (options.topics && Array.isArray(options.topics)) {
-        topics = [...options.topics];
+    // create topics based on filter
     } else {
-        topics = [];
+
+        result.topics = [];
+
         // add event signature
         if (event && !event.anonymous && event.name !== 'ALLEVENTS') {
-            topics.push(
-                event.signature || abi.encodeEventSignature(utils.jsonInterfaceMethodToString(event)),
-            );
+            result.topics.push(event.signature);
         }
 
         // add event topics (indexed arguments)
-        if (event.name !== 'ALLEVENTS' && event.inputs) {
-            for (const input of event.inputs) {
-                if (!input.indexed) {
-                    continue;
-                }
-
-                const value = filter[input.name];
+        if (event.name !== 'ALLEVENTS') {
+            var indexedTopics = event.inputs.filter(function (i) {
+                return i.indexed === true;
+            }).map(function (i) {
+                var value = filter[i.name];
                 if (!value) {
-                    // eslint-disable-next-line no-null/no-null
-                    topics.push(null);
-                    continue;
+                    return null;
                 }
 
+                // TODO: https://github.com/ethereum/web3.js/issues/344
+                // TODO: deal properly with components
+
                 if (Array.isArray(value)) {
-                    topics.push(value.map(v => abi.encodeParameter(input.type, v)));
-                } else {
-                    topics.push(abi.encodeParameter(input.type, value));
+                    return value.map(function (v) {
+                        return abi.encodeParameter(i.type, v);
+                    });
                 }
-            }
+                return abi.encodeParameter(i.type, value);
+            });
+
+            result.topics = result.topics.concat(indexedTopics);
         }
-    }
 
-    if(topics.length) {
-        result.topics = topics
+        if(!result.topics.length)
+            delete result.topics;
     }
 
     if(this.options.address) {
@@ -680,7 +682,6 @@ Contract.prototype._generateEventOptions = function() {
     return {
         params: this._encodeEventABI(event, options),
         event: event,
-        filter: options.filter || {},
         callback: callback
     };
 };
@@ -783,24 +784,6 @@ Contract.prototype._on = function(){
     return subscription;
 };
 
-const filterAllEventsResults = (subOptions, data) => {
-    if (subOptions.event && subOptions.event.name === 'ALLEVENTS' && Array.isArray(data)) {
-        const filter = subOptions.filter || {};
-        const filterKeys = Object.keys(filter);
-        return filterKeys.length > 0
-            ? data.filter(log => typeof log === 'string' ? true : filterKeys.every((k) => Array.isArray(filter[k]) ? (filter[k]).some(
-                    (v) =>
-                        String(log.returnValues[k]).toUpperCase() ===
-                        String(v).toUpperCase(),
-                ) : (
-                    String(log.returnValues[k]).toUpperCase() ===
-                    String(filter[k]).toUpperCase()
-                )),
-            )
-            : data;
-    }
-    return data;
-};
 /**
  * Get past events from contracts
  *
@@ -825,11 +808,7 @@ Contract.prototype.getPastEvents = function(){
 
     getPastLogs = null;
 
-    return call(subOptions.params, (err, data)=>{
-        if(typeof subOptions.callback === 'function'){
-            subOptions.callback(err, filterAllEventsResults(subOptions, data))
-        }
-    }).then(filterAllEventsResults.bind(this, subOptions));
+    return call(subOptions.params, subOptions.callback);
 };
 
 
diff --git a/node_modules/web3-eth-contract/types/index.d.ts b/node_modules/web3-eth-contract/types/index.d.ts
index 55261db..5abc6fe 100644
--- a/node_modules/web3-eth-contract/types/index.d.ts
+++ b/node_modules/web3-eth-contract/types/index.d.ts
@@ -177,5 +177,3 @@ export interface EventData {
     blockNumber: number;
     address: string;
 }
-
-export default Contract
diff --git a/node_modules/web3-eth-contract/types/tests/contract-test.ts b/node_modules/web3-eth-contract/types/tests/contract-test.ts
index 55043a7..5665781 100644
--- a/node_modules/web3-eth-contract/types/tests/contract-test.ts
+++ b/node_modules/web3-eth-contract/types/tests/contract-test.ts
@@ -18,12 +18,8 @@
  * @date 2018
  */
 
-import ContractDefault, { Contract } from 'web3-eth-contract';
+import { Contract } from 'web3-eth-contract';
 
-// $ExpectType Contract
-const contract_default = new ContractDefault([]);
-
-// $ExpectType Contract
 const contract = new Contract([]);
 
 // $ExpectType string | null
